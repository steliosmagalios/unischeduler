// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          UserRole  @default(User)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum UserRole {
    User
    Professor
    Admin
}

model Course {
    id          String    @id @default(cuid())
    code        String    @unique
    name        String
    description String
    semester    Int       @db.SmallInt
    lectures    Lecture[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Lecture {
    id       String   @id @default(cuid())
    name     String
    type     RoomType
    duration Int      @db.SmallInt
    groups   Group[]

    Course   Course @relation(fields: [courseId], references: [id])
    courseId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Task      Task[]
}

model Group {
    id   String @id @default(cuid())
    name String

    overlapping  Group[] @relation("OverlappingGroups")
    overlappedBy Group[] @relation("OverlappingGroups")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Lecture Lecture[]
}

enum RoomType {
    Auditorium
    Laboratory
}

model Room {
    id           String   @id @default(cuid())
    name         String   @unique
    type         RoomType
    capacity     Int      @db.Integer
    availability Int[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Task      Task[]
}

model UserData {
    id           String @id @default(cuid())
    firstName    String @db.Text
    lastName     String @db.Text
    availability Int[]

    // TODO Enrollments and Groups

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum TimetableSemester {
    Fall
    Spring
}

model Timetable {
    id       String            @id @default(cuid())
    name     String
    semester TimetableSemester
    dayStart Int               @db.SmallInt
    dayEnd   Int               @db.SmallInt
    tasks    Task[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Task {
    id        String  @id @default(cuid())
    startTime Int     @db.SmallInt
    lecture   Lecture @relation(fields: [lectureId], references: [id])
    lectureId String
    room      Room    @relation(fields: [roomId], references: [id])
    roomId    String

    Timetable   Timetable @relation(fields: [timetableId], references: [id])
    timetableId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
