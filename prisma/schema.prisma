// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id           Int      @id @default(autoincrement())
    externalId   String?  @unique
    firstName    String?
    lastName     String?
    email        String   @unique
    imageUrl     String?
    role         UserRole @default(User)
    availability Int[]

    // Setup enrollment and groups

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    lectures  Lecture[]
}

enum UserRole {
    User
    Professor
    Admin
}

model Course {
    id       Int       @id @default(autoincrement())
    code     String    @unique
    name     String
    semester Int       @db.SmallInt
    lectures Lecture[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Lecture {
    id         Int      @id @default(autoincrement())
    name       String
    type       RoomType
    duration   Int      @db.SmallInt
    professors User[]
    groups     Group[]

    Course   Course @relation(fields: [courseId], references: [id])
    courseId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Task      Task[]
}

model Group {
    id   Int    @id @default(autoincrement())
    name String
    size Int    @default(0)

    overlapping  Group[] @relation("OverlappingGroups")
    overlappedBy Group[] @relation("OverlappingGroups")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Lecture Lecture[]
}

enum RoomType {
    Auditorium
    Laboratory
}

model Room {
    id           Int      @id @default(autoincrement())
    name         String   @unique
    type         RoomType
    capacity     Int      @db.Integer
    availability Int[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Task      Task[]
}

enum TimetableSemester {
    Fall
    Spring
}

model Timetable {
    id        Int               @id @default(autoincrement())
    name      String
    semester  TimetableSemester
    tasks     Task[]
    published Boolean           @default(false)
    generated Boolean           @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Task {
    id        Int     @id @default(autoincrement())
    startTime Int     @db.SmallInt
    lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)
    lectureId Int
    room      Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
    roomId    Int

    Timetable   Timetable @relation(fields: [timetableId], references: [id], onDelete: Cascade)
    timetableId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
